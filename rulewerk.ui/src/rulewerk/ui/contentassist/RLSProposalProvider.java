/*
 * generated by Xtext 2.20.0
 */
package rulewerk.ui.contentassist;

import java.util.HashSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class RLSProposalProvider extends AbstractRLSProposalProvider {
	static HashSet<String> uniVars = new HashSet<String>();
	static HashSet<String> preds = new HashSet<String>();

	@Override
	public void complete_UNIVAR(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		uniVars.clear();

		System.out.println(context.getCurrentNode().getParent().getParent().getParent().getParent().getText());
		for (INode n : context.getCurrentNode().getParent().getParent().getParent().getParent().getLeafNodes()) {
			if (n.getText().startsWith("?")) {
				uniVars.add(n.getText());
			}
		}
		if (!uniVars.isEmpty()) {
			for (String uniVar : uniVars) {
				acceptor.accept(createCompletionProposal(uniVar, uniVar, null, context));
			}
		}
	}

	@Override
	public void complete_predicateName(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		preds.clear();
		for (INode n : context.getCurrentNode().getParent().getRootNode().getLeafNodes()) {
			if (n.getGrammarElement() instanceof RuleCall) {
				RuleCall rc = (RuleCall) n.getGrammarElement();
				AbstractRule r = rc.getRule();
				if (r.getName().equals("VARORPREDNAME")) {
					RuleCall rr = (RuleCall) n.getParent().getGrammarElement();
					AbstractRule s = rr.getRule();
					if (s.getName().equals("predicateName")) {
						preds.add(n.getText());
					}
				}
			}
		}
		if (!preds.isEmpty()) {
			for (String pred : preds) {
				acceptor.accept(createCompletionProposal(pred, pred, null, context));
			}
		}
	}

}
