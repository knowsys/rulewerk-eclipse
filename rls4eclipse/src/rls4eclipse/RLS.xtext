grammar rls4eclipse.RLS hidden(SKIP)

generate rLS "http://www.RLS.rls4eclipse"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	{Model}
	(b+=Base)?
	(p+=Prefix)*
	(s+=Source)*
	(st+=Statement)*
	E*;

terminal E:
	EOF;

PrefixedName:
	prefixname=PNAME_LN;

IRIREF:
	iri=IRI;

IRIBOL:
	iri=IRIREF | iri=PrefixedName;

RDFLiteral:
	s=Striing
	(l=LANGTAG |
	DATATYPE iri=IRIBOL)?;

NumericLiteral:
	int=INTEGER
	| dec=DECIMAL
	| dbl=DOUBLE;

COM:
	COMMA;

COM2:
	COMMA;

Term:
	iri=IRIBOL
	| nl=NumericLiteral
	| rl=RDFLiteral
	| uv=UNIVAR
	| ev=EXIVAR
	| v=VARORPREDNAME
	| nn=NAMED_NULL
	| cl=Configurable_Literal;

predicateName:
	prediri=IRIBOL
	| PredName=VARORPREDNAME;

listOfTerms:
	trms+=Term
	(COM2 trms+=Term)*;

NegativeLiteral:
	TILDE predname=predicateName LPAREN trms=listOfTerms RPAREN;

Fact:
	predname=predicateName LPAREN trms=listOfTerms RPAREN DOT;

PositiveLiteral:
	predname=predicateName LPAREN trms=listOfTerms RPAREN;

Literal:
	PositiveLiteral
	| NegativeLiteral;

listOfLiterals:
	l+=Literal
	(COM l+=Literal)*;

listOfPositiveLiterals:
	pls+=PositiveLiteral
	(COM pls+=PositiveLiteral)*;

Rule:
	head=listOfPositiveLiterals ARROW body=listOfLiterals DOT;

Statement:
	rule=Rule
	| fact=Fact
	| directive=Directive;

Striing:
	st1=STRING_LITERAL1
	| st2=STRING_LITERAL2
	| stl1=STRING_LITERAL_LONG1
	| stl2=STRING_LITERAL_LONG2;

Directive:
	directiveName=DIRECTIVENAME arguments=Arguments DOT;

RulenoDot:
	head=listOfPositiveLiterals ARROW body=listOfLiterals;

DataSource:
	pl=PositiveLiteral;
	//(sourceName=DIRECTIVENAME | sourceName=VARORPREDNAME) LPAREN arg=Arguments RPAREN;
Prefix:
//PRFX t=COLON iriString=IRIREF DOT|
	PRFX prefixName=PNAME_NS iriString=IRIREF DOT;

Base:
	BS iriString=IRIREF DOT;

Source:
	SRC predname=predicateName arity=AR COLON pl+=PositiveLiteral DOT;

Configurable_Literal:
	pdl=PIPE_DELIMITED_LITERAL | hdl=HASH_DELIMITED_LITERAL |
	//paren=parenDelimitedLiteral | 
	bdl1=braceDelimitedLiteral | bdl2=bracketDelimitedLiteral;

	//parenDelimitedLiteral:
//{parenDelimitedLiteral} LPAREN (pdlb+=parenDelimitedLiteralBody)* RPAREN;

//parenDelimitedLiteralBody:
//{parenDelimitedLiteralBody} (un=UNPAREN | LPAREN pdlb+=parenDelimitedLiteralBody RPAREN);

braceDelimitedLiteral:
	{braceDelimitedLiteral} '{' (bdlp+=braceDelimitedLiteralBody)* '}';

braceDelimitedLiteralBody:
	{braceDelimitedLiteralBody} (ub=UNBRACE | '{' bdlb+=braceDelimitedLiteralBody '}');

bracketDelimitedLiteral:
	{bracketDelimitedLiteral} '[' (bdlb+=bracketDelimitedLiteralBody)* ']';

bracketDelimitedLiteralBody:
	{bracketDelimitedLiteralBody} (ub=UNBRACKET | '[' bdlb+=bracketDelimitedLiteralBody ']');

Arguments:
	{Arguments} (rulenodot=RulenoDot | positiveliteral=PositiveLiteral | t=Term) (COMMA arguments=Arguments)?;

Command:
	directiveName=DIRECTIVENAME (predicatename=predicateName arity=AR DOT | predicatename=predicateName arity=AR COLON
	arguments=Arguments DOT | arguments=Arguments DOT | prefixedName=PNAME_NS arguments=Arguments DOT | DOT);

AR:
	ar=ARITY;

terminal ARITY:
	"[" INTEGER "]";

terminal PRFX:
	"@prefix ";

terminal BS:
	"@base ";

terminal SRC:
	"@source";

terminal UNIVAR:
	QMARK VARORPREDNAME;

terminal EXIVAR:
	EMARK VARORPREDNAME;

terminal NAMED_NULL:
	"_:" (PN_CHARS_U | ("0".."9")) ((PN_CHARS | ".")* PN_CHARS)?;

terminal INTEGER:
	SIGN DIGITS;

terminal DECIMAL:
	SIGN (DIGITS "." (DIGITS)* | "." DIGITS);

terminal DOUBLE:
	SIGN (DIGITS "." ("0".."9")* EXPONENT | "." DIGITS EXPONENT | DIGITS EXPONENT);

terminal DIGITS:
	("0".."9")+;

terminal EXPONENT:
	("e" | "E") ("+" | "-")? ("0".."9")+;

terminal SIGN:
	("+" | "-")?;

terminal SKIP:
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f" | '%' (!'\n')* '\n';

terminal UNBRACE:
	'{' (!('{' | '}'))+ '}';

terminal UNBRACKET:
	'[' (!('[' | ']'))+ ']';

	//terminal UNPAREN:
//'(' (!('(' | ')'))+ ')';

terminal PIPE_DELIMITED_LITERAL:
	PIPE_DELIMITED (!"|")* PIPE_DELIMITED;

terminal HASH_DELIMITED_LITERAL:
	HASH_DELIMITED (!"#")* HASH_DELIMITED;

terminal STRING_LITERAL1:
// Single quoted string
	"'" (!("'" | "\\" | "\n" | "\r") | ECHAR)* "'";

terminal STRING_LITERAL2:
// Double quoted string
	"\"" (!("\"" | "\\" | "\n" | "\r") | ECHAR)* "\"";

terminal STRING_LITERAL_LONG1:
	"'''" (!("'" | "\\") |
	ECHAR | ("'" (!"'")) | ("''" (!"'")))* "'''";

terminal STRING_LITERAL_LONG2:
	"\"\"\"" (!("\"" | "\\") | ECHAR | ("\"" (!"\"")) | ("\"\"" (!"\"")))* "\"\"\"";

terminal ECHAR:
	"\\" ("t" | "b" | "n" | "r" |
	"f" | "\\" | "\"" | "'");

terminal PIPE_DELIMITED:
	"|";

terminal HASH_DELIMITED:
	"#";

terminal IRI:
	'<' (!('>' | '<' | '\"' | '{' | '}' | '^' | '\\' | '|' | '`' | ('\u0000'..'\u0020')))* '>';

terminal PNAME_LN:
	(PN_PREFIX)? ":" PN_LOCAL;

terminal PNAME_NS:
	PN_PREFIX
	":";

terminal DIRECTIVENAME:
	AT VARORPREDNAME;

terminal VARORPREDNAME:
	A2Z (A2ZN | "-" | "_")*;

terminal LANGTAG:
	AT (A2Z)*
	("-" (A2ZN)+)?;

terminal A2Z:
	("a".."z" | "A".."Z");

	//terminal A2ZNX:
//("a".."z" | "A".."Z" | "0".."9" | "-" | "_");

terminal A2ZN:
	("a".."z" | "A".."Z" | "0".."9");

terminal LPAREN:
	"(";

terminal RPAREN:
	")";

terminal COMMA:
	",";

terminal DOT:
	".";

terminal ARROW:
	":-";

terminal QMARK:
	"?";

terminal EMARK:
	"!";

terminal TILDE:
	"~";

terminal COLON:
	":";

terminal DATATYPE:
	"^^";

terminal AT:
	"@";

terminal PN_CHARS_BASE:
	("A".."Z") | ("a".."z") | ("\u00c0".."\u00d6") | ("\u00d8".."\u00f6") | ("\u00f8".."\u02ff") | ("\u0370".."\u037d") |
	("\u037f".."\u1fff") | ("\u200c".."\u200d") | ("\u2070".."\u218f") | ("\u2c00".."\u2fef") | ("\u3001".."\ud7ff") |
	("\uf900".."\ufffd");

terminal PN_CHARS_U:
	PN_CHARS_BASE | "_";

terminal PN_CHARS:
	(PN_CHARS_U | "-" | ("0".."9") | "\u00b7" | ("\u0300".."\u036f") |
	("\u203f".."\u2040"));

terminal PN_PREFIX:
	PN_CHARS_BASE ((PN_CHARS | ".")* PN_CHARS)?;

terminal PN_LOCAL:
	(PN_CHARS_U | ":" | ("0".."9")) ((PN_CHARS | "." | ":")* PN_CHARS)?;

